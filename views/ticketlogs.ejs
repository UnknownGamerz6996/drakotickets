<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ticket Logs</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"></noscript>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: #121212;
            color: #e0e0e0;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        .navbar {
            background-color: #1e1e1e;
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .navbar-brand {
            color: #1769FF;
            font-size: 1.5rem;
            font-weight: 700;
            display: flex;
            align-items: center;
        }
        .navbar-brand i {
            margin-right: 0.5rem;
        }
        .navbar-nav {
            align-items: center;
        }
        .navbar-nav .nav-link {
            color: #e0e0e0;
            margin: 0 15px;
            font-size: 1rem;
            transition: color 0.3s, transform 0.3s;
            position: relative;
        }
        .navbar-nav .nav-link:hover, .navbar-nav .nav-link.active {
            color: #1769FF;
            transform: translateY(-2px);
        }
        .navbar-nav .nav-link::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 2px;
            bottom: -5px;
            left: 0;
            background-color: #1769FF;
            visibility: hidden;
            transform: scaleX(0);
            transition: all 0.3s ease-in-out;
        }
        .navbar-nav .nav-link:hover::after, .navbar-nav .nav-link.active::after {
            visibility: visible;
            transform: scaleX(1);
        }
        .navbar-nav .btn-logout {
            background-color: #dc3545;
            color: #fff;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            transition: background-color 0.3s, transform 0.3s;
        }
        .navbar-nav .btn-logout:hover {
            background-color: #c82333;
            transform: translateY(-2px);
        }
        .navbar-toggler {
            border-color: #e0e0e0;
        }
        .navbar-toggler-icon {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30'%3e%3cpath stroke='rgba(224, 224, 224, 1)' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
        }
        @media (max-width: 991px) {
            .navbar-nav {
                background-color: #1e1e1e;
                padding: 1rem;
                border-radius: 0 0 10px 10px;
            }
            .navbar-nav .nav-link {
                margin: 10px 0;
            }
        }
        .content {
            padding: 2rem;
            flex: 1;
        }
        .filters {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        .filter-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .filter-label {
            font-size: 0.9rem;
            color: #a0a0a0;
        }
        .filter-dropdown, .daterange-btn, .form-control {
            background-color: #1e1e1e;
            color: #e0e0e0;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 0.7rem 1rem;
            font-size: 0.9rem;
            transition: all 0.3s;
            min-width: 150px;
        }
        .filter-dropdown:hover, .daterange-btn:hover, .form-control:focus {
            border-color: #1769FF;
            box-shadow: 0 0 0 2px rgba(23, 105, 255, 0.1);
        }
        .btn-group {
            display: flex;
            gap: 0.5rem;
        }
        .btn {
            border-radius: 8px;
            padding: 0.7rem 1.2rem;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        .btn i {
            font-size: 1rem;
        }
        .btn-primary {
            background-color: #1769FF;
            border: none;
        }
        .btn-primary:hover {
            background-color: #0052cc;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .btn-secondary {
            background-color: #2c2c2c;
            border: 1px solid #444;
            color: #e0e0e0;
        }
        .btn-secondary:hover {
            background-color: #3a3a3a;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .table {
            background-color: #1e1e1e;
            color: #e0e0e0;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .table th, .table td {
            border-color: #333;
            padding: 1rem;
            vertical-align: middle;
        }
        .table th {
            background-color: #252525;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.05em;
        }
        .badge-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.8rem;
            text-transform: uppercase;
        }
        .status-open { background-color: #28a745; }
        .status-closed { background-color: #6c757d; }
        .status-deleted { background-color: #dc3545; }
        .pagination {
            margin-top: 2rem;
        }
        .pagination .page-link {
            background-color: #1e1e1e;
            color: #e0e0e0;
            border-color: #333;
            transition: all 0.3s;
            border-radius: 8px;
            margin: 0 2px;
        }
        .pagination .page-item.active .page-link {
            background-color: #1769FF;
            border-color: #1769FF;
        }
        .pagination .page-link:hover {
            background-color: #252525;
            transform: translateY(-2px);
        }
        .time-bubble {
            background-color: #252525;
            color: #e0e0e0;
            padding: 0.4rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            display: inline-block;
        }
        .requester {
            display: flex;
            align-items: center;
        }
        .requester img {
            border-radius: 50%;
            width: 30px;
            height: 30px;
            margin-right: 0.8rem;
        }
        .empty-message {
            text-align: center;
            margin-top: 50px;
            color: #1769FF;
            font-size: 1.2rem;
        }
        @media (max-width: 768px) {
            .filters {
                flex-direction: column;
                align-items: stretch;
            }
            .filter-dropdown, .daterange-btn, .form-control {
                width: 100%;
                margin-bottom: 1rem;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <a class="navbar-brand" href="/">
            <i class="fas fa-ticket-alt"></i>
            Drako Development
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="/ticket-logs">Tickets</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/statistics">Statistics</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="https://builtbybit.com/resources/drako-bot-multi-purpose-discord-bot.22266/" target="_blank">BuiltByBit</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="https://discord.gg/drakobot" target="_blank">Discord</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn-logout" href="/logout">Logout</a>
                </li>
            </ul>
        </div>
    </nav>
    <div class="content">
        <div class="filters">
            <div class="filter-group">
                <span class="filter-label">Status:</span>
                <select class="filter-dropdown" id="status-filter">
                    <option value="all">All Tickets</option>
                    <option value="open">Open Tickets</option>
                    <option value="closed">Closed Tickets</option>
                    <option value="deleted">Deleted Tickets</option>
                </select>
            </div>
            <div class="filter-group">
                <span class="filter-label">Date Range:</span>
                <button class="daterange-btn" id="daterange-btn">
                    <i class="fas fa-calendar-alt"></i>
                    <span>Select Dates</span>
                </button>
            </div>
            <div class="filter-group">
                <span class="filter-label">Owner:</span>
                <input type="text" id="search-owner" class="form-control" placeholder="Search by Owner">
            </div>
            <div class="btn-group">
                <button id="apply-filters" class="btn btn-primary">
                    <i class="fas fa-filter"></i>
                    Apply Filters
                </button>
                <button id="reset-filters" class="btn btn-secondary">
                    <i class="fas fa-undo"></i>
                    Reset
                </button>
            </div>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Channel Name</th>
                    <th>Requester</th>
                    <th>Last Message Date</th>
                    <th>Status</th>
                    <th class="text-right">Actions</th>
                </tr>
            </thead>
            <tbody id="tickets-table-body">
                <% tickets.forEach(ticket => { %>
                    <tr>
                        <td><%= ticket.channelName %></td>
                        <td>
                            <div class="requester">
                                <img src="<%= ticket.requesterAvatar %>" alt="Avatar">
                                <span>@<%= ticket.requesterName %></span>
                            </div>
                        </td>
                        <td><span class="time-bubble" data-date="<%= ticket.lastMessageDate %>"></span></td>
                        <td><span class="badge badge-status status-<%= ticket.status %>"><%= ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1) %></span></td>
                        <td class="text-right">
                            <a href="/transcript/<%= ticket.ticketId %>" target="_blank" class="btn btn-primary btn-sm">View</a>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
        <div id="empty-message" class="empty-message" style="display: none;">
            <p>Well this is awkward...</p>
        </div>
        <nav>
            <ul class="pagination">
                <!-- Pagination will be dynamically inserted here -->
            </ul>
        </nav>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <script>
        $(document).ready(function() {
            const tickets = <%- JSON.stringify(tickets) %>;
            const owners = <%- JSON.stringify(owners) %>;
            const itemsPerPage = 10;
            let currentPage = 1;
            let currentFilter = 'all';
            let startDate = null;
            let endDate = null;
            let filteredTickets = [];

            const calculateTimeDifference = (date) => {
                if (!date) return 'No Messages';

                const now = new Date();
                const messageDate = new Date(date);
                if (isNaN(messageDate.getTime())) return 'No Messages';

                const diff = now - messageDate;

                const seconds = Math.floor(diff / 1000);
                const minutes = Math.floor(seconds / 60);
                const hours = Math.floor(minutes / 60);
                const days = Math.floor(hours / 24);
                const weeks = Math.floor(days / 7);
                const months = Math.floor(days / 30);
                const years = Math.floor(days / 365);

                if (years > 0) return `${years} year${years > 1 ? 's' : ''} ${months % 12} month${months % 12 > 1 ? 's' : ''}`;
                if (months > 0) return `${months} month${months > 1 ? 's' : ''} ${days % 30} day${days % 30 > 1 ? 's' : ''}`;
                if (weeks > 0) return `${weeks} week${weeks > 1 ? 's' : ''} ${days % 7} day${days % 7 > 1 ? 's' : ''}`;
                if (days > 0) return `${days} day${days > 1 ? 's' : ''} ${hours % 24} hour${hours % 24 > 1 ? 's' : ''}`;
                if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ${minutes % 60} minute${minutes % 60 > 1 ? 's' : ''}`;
                if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ${seconds % 60} second${seconds % 60 > 1 ? 's' : ''}`;
                return `${seconds} second${seconds > 1 ? 's' : ''}`;
            };

            const renderTickets = (page) => {
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;

                filteredTickets = tickets.filter(ticket => {
                    const matchesStatus = currentFilter === 'all' || ticket.status.toLowerCase() === currentFilter;
                    const ownerInput = document.getElementById('search-owner');
                    const owner = ownerInput ? ownerInput.value.toLowerCase() : '';
                    const matchesOwner = owner ? (ticket.requesterName ? ticket.requesterName.toLowerCase().includes(owner) : false) : true;
                    const matchesDate = (!startDate || new Date(ticket.createdAt) >= new Date(startDate)) &&
                                        (!endDate || new Date(ticket.createdAt) <= new Date(endDate));
                    return matchesStatus && matchesOwner && matchesDate;
                });

                const ticketsToShow = filteredTickets.slice(start, end);
                const ticketsTableBody = document.getElementById('tickets-table-body');
                ticketsTableBody.innerHTML = '';

                if (ticketsToShow.length === 0) {
                    document.getElementById('empty-message').style.display = 'block';
                } else {
                    document.getElementById('empty-message').style.display = 'none';
                }

                ticketsToShow.forEach(ticket => {
                    const lastMessageDate = new Date(ticket.lastMessageDate);
                    const lastMessageDateText = calculateTimeDifference(lastMessageDate);

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${ticket.channelName}</td>
                        <td>
                            <div class="requester">
                                <img src="${ticket.requesterAvatar}" alt="Avatar">
                                <span>@${ticket.requesterName}</span>
                            </div>
                        </td>
                        <td><span class="time-bubble">${lastMessageDateText}</span></td>
                        <td><span class="badge badge-status status-${ticket.status}">${ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1)}</span></td>
                        <td class="text-right">
                            <a href="/transcript/${ticket.ticketId}" target="_blank" class="btn btn-primary btn-sm">View</a>
                        </td>
                    `;
                    ticketsTableBody.appendChild(row);
                });

                renderPagination(page, filteredTickets.length);
            };

            const renderPagination = (page, totalItems) => {
                const pagination = document.querySelector('.pagination');
                pagination.innerHTML = '';
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                const maxPages = 5; // Maximum number of pages to display in the pagination

                const createPageItem = (pageNum) => {
                    const pageItem = document.createElement('li');
                    pageItem.classList.add('page-item');
                    if (pageNum === page) pageItem.classList.add('active');
                    const link = document.createElement('a');
                    link.classList.add('page-link');
                    link.href = '#';
                    link.dataset.page = pageNum;
                    link.textContent = pageNum;
                    pageItem.appendChild(link);
                    return pageItem;
                };

                // Add 'First' and 'Prev' buttons
                if (page > 1) {
                    pagination.appendChild(createPageItem('first'));
                    pagination.appendChild(createPageItem('prev'));
                }

                // Add page numbers
                let startPage = Math.max(1, page - Math.floor(maxPages / 2));
                let endPage = Math.min(totalPages, startPage + maxPages - 1);

                if (endPage - startPage < maxPages - 1) {
                    startPage = Math.max(1, endPage - maxPages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    pagination.appendChild(createPageItem(i));
                }

                // Add 'Next' and 'Last' buttons
                if (page < totalPages) {
                    pagination.appendChild(createPageItem('next'));
                    pagination.appendChild(createPageItem('last'));
                }

                document.querySelectorAll('.pagination .page-link').forEach(link => {
                    link.addEventListener('click', (event) => {
                        event.preventDefault();
                        const targetPage = event.target.dataset.page;

                        if (targetPage === 'prev' && currentPage > 1) {
                            currentPage--;
                        } else if (targetPage === 'next' && currentPage < totalPages) {
                            currentPage++;
                        } else if (targetPage === 'first') {
                            currentPage = 1;
                        } else if (targetPage === 'last') {
                            currentPage = totalPages;
                        } else if (!isNaN(targetPage)) {
                            currentPage = Number(targetPage);
                        }

                        renderTickets(currentPage);
                    });
                });
            };

            // New function to apply filters
            const applyFilters = () => {
                currentFilter = $('#status-filter').val();
                const ownerInput = $('#search-owner').val().toLowerCase();
                
                filteredTickets = tickets.filter(ticket => {
                    const matchesStatus = currentFilter === 'all' || ticket.status.toLowerCase() === currentFilter;
                    const matchesOwner = ownerInput ? (ticket.requesterName ? ticket.requesterName.toLowerCase().includes(ownerInput) : false) : true;
                    const matchesDate = (!startDate || new Date(ticket.createdAt) >= new Date(startDate)) &&
                                        (!endDate || new Date(ticket.createdAt) <= new Date(endDate));
                    return matchesStatus && matchesOwner && matchesDate;
                });

                currentPage = 1;
                renderTickets(currentPage);
            };

            // Event listener for apply filters button
            $('#apply-filters').on('click', applyFilters);

            // Event listener for reset filters button
            $('#reset-filters').on('click', () => {
                $('#status-filter').val('all');
                $('#search-owner').val('');
                $('#daterange-btn').text('Select Dates');
                startDate = null;
                endDate = null;
                currentFilter = 'all';
                applyFilters();
            });

            // Update daterangepicker to use the apply filters function
            $('#daterange-btn').daterangepicker({
                opens: 'left',
                autoUpdateInput: false,
                locale: {
                    cancelLabel: 'Clear'
                }
            }, function(start, end, label) {
                startDate = start.format('YYYY-MM-DD');
                endDate = end.format('YYYY-MM-DD');
                $('#daterange-btn').html(`<i class="fas fa-calendar-alt"></i> ${start.format('MM/DD/YYYY')} - ${end.format('MM/DD/YYYY')}`);
            });

            $('#daterange-btn').on('cancel.daterangepicker', function(ev, picker) {
                $('#daterange-btn').html('<i class="fas fa-calendar-alt"></i> Select Dates');
                startDate = null;
                endDate = null;
            });

            // Remove individual filter change events, as we now use the apply button
            $('#status-filter').off('change');
            $('#search-owner').off('input');

            const autocomplete = (input, array) => {
                let currentFocus;
                input.addEventListener("input", function(e) {
                    const val = this.value;
                    closeAllLists();
                    if (!val) return false;
                    currentFocus = -1;
                    const a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    this.parentNode.appendChild(a);
                    array.forEach(item => {
                        if (item.substr(0, val.length).toUpperCase() === val.toUpperCase()) {
                            const b = document.createElement("DIV");
                            b.innerHTML = "<strong>" + item.substr(0, val.length) + "</strong>";
                            b.innerHTML += item.substr(val.length);
                            b.innerHTML += "<input type='hidden' value='" + item + "'>";
                            b.addEventListener("click", function(e) {
                                input.value = this.getElementsByTagName("input")[0].value;
                                renderTickets(1);
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    });
                });

                input.addEventListener("keydown", function(e) {
                    let x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode === 40) {
                        currentFocus++;
                        addActive(x);
                    } else if (e.keyCode === 38) {
                        currentFocus--;
                        addActive(x);
                    } else if (e.keyCode === 13) {
                        e.preventDefault();
                        if (currentFocus > -1) {
                            if (x) x[currentFocus].click();
                        }
                    }
                });

                const addActive = (x) => {
                    if (!x) return false;
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = x.length - 1;
                    x[currentFocus].classList.add("autocomplete-active");
                };

                const removeActive = (x) => {
                    for (let i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                };

                const closeAllLists = (elmnt) => {
                    const x = document.getElementsByClassName("autocomplete-items");
                    for (let i = 0; i < x.length; i++) {
                        if (elmnt !== x[i] && elmnt !== input) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                };

                document.addEventListener("click", function(e) {
                    closeAllLists(e.target);
                });
            };

            autocomplete(document.getElementById('search-owner'), owners);

            renderTickets(currentPage);
        });
    </script>
</body>
</html>